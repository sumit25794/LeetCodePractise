public class Solution {
    public List<String> letterCombinations(String digits)
    {
        List<String> result = new ArrayList<>();
        if(digits == null || digits.isEmpty())
            return result;
        HashMap<Character,String> map = new HashMap<>();
        map.put('0',"");
        map.put('1',"");
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");
        StringBuilder current = new StringBuilder();
        getCombine(result,current, map, digits);
        return result;
    }
    public void getCombine(List<String> result,StringBuilder current, HashMap<Character,String> map, String digits)
    {
        if(digits.length()==0)
        {
            result.add(current.toString());
            return;
        }
        String temp = map.get((digits.substring(0,1)).charAt(0));
        for(int i=0; i<temp.length(); i++)
        {
                current.append(temp.charAt(i));
                getCombine(result,current,map,digits.substring(1));
                current.deleteCharAt(current.length()-1);
        }
    }
}
